/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
#include "main.h"
#include <stdio.h>
#include <string.h>
#include "stm32f1xx_hal_usart.h"
#include "stm32f1xx_hal.h"
#include "stm32f1xx_hal_conf.h"
#include "stm32f1xx_hal_def.h"
#include "stm32f1xx_hal_gpio.h"
uint32_t fan_rpm = 0;
TIM_HandleTypeDef htim2;
USART_HandleTypeDef husart2;
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART2_Init(void);
void ControlFan(int);
void ControlFanSpeed(float);
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  HAL_Init();
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  SystemClock_Config();

  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_USART2_Init();
	

  while (1)
  {
		ControlFan(1);  // Turn the fan ON
    HAL_Delay(5000);   // Fan runs for 5 seconds
        
    ControlFan(0); // Turn the fan OFF
    HAL_Delay(5000);  
  }
}

void ControlFan(int state) {
    if (state == 1) {
        // Turn ON relay, fan runs
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Set A1 high
    } else {
        // Turn OFF relay, fan stops
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Set A1 low
    }
}
extern USART_HandleTypeDef husart2; // Declare your USART handle
typedef struct {
    float temperature;  // Temperature input
    double fan_rpm;   // Corresponding RPM value
} TempToRPM;

// Create a lookup table for temperature and corresponding RPM
TempToRPM lookup_table[] = {
    {0.16, 4521},            // 0.16°C -> 4521 RPM
    {9.99026, 202},           // 9.99026°C (or 282.99026 K) -> 202 RPM
    {0.39, 4438},            // 0.39°C -> 4438 RPM
    {9.78918, 66.47},         // 9.78918°C -> 66.47 RPM
    {0.06654, 656},          // 0.06654°C -> 656 RPM
    {9.33538, 10},            // 9.33538°C -> 10 RPM
    // Add more entries as needed
};

void ControlFanSpeed(float temperature) {
    uint16_t fan_rpm = 0;
    char rpm_message[50];   // Buffer to hold the message for transmission
    int found = 0;          // Flag to check if we found a matching temperature

    // Iterate over the lookup table to find a matching temperature
    for (int i = 0; i < sizeof(lookup_table) / sizeof(lookup_table[0]); i++) {
        if (temperature == lookup_table[i].temperature) {
            fan_rpm = lookup_table[i].fan_rpm;
            found = 1;  // Set flag that we found the temperature
            break;
        }
    }

    if (!found) {
        fan_rpm = 0;  // If no match is found, set RPM to 0 (or some default)
    }

    // Set the RPM of the fan using timer compare
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fan_rpm);
    
    // Transmit the fan RPM message over USART
    sprintf(rpm_message, "%d", fan_rpm);
    HAL_USART_Transmit(&husart2, (uint8_t *)rpm_message, strlen(rpm_message), HAL_MAX_DELAY);
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
	
	__HAL_RCC_TIM2_CLK_ENABLE();
}
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 160;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
      Error_Handler();  // Handle error
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
      Error_Handler();  // Handle error
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_TIM_MspPostInit(&htim2);

}
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
	__HAL_RCC_USART2_CLK_ENABLE();
  husart2.Instance = USART2;
  husart2.Init.BaudRate = 9600;
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
  husart2.Init.StopBits = USART_STOPBITS_1;
  husart2.Init.Parity = USART_PARITY_NONE;
  husart2.Init.Mode = USART_MODE_TX_RX;
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
  if (HAL_USART_Init(&husart2) != HAL_OK)
  {
    Error_Handler();
  }
}
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
  /*Configure GPIO pin : PA1 */
  __HAL_RCC_GPIOA_CLK_ENABLE();
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;  // TX and RX pins
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    
    // Enable clock for GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
    
    // Configure PA1 as output
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // Assuming the error LED is connected to GPIOB pin 0
    HAL_Delay(500);  // Toggle every 500 ms (0.5 seconds)
    char *errorMsg = "System encountered an error and is halted.\r\n";
    HAL_USART_Transmit(&husart2, (uint8_t *)errorMsg, strlen(errorMsg), HAL_MAX_DELAY);}
}
#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

