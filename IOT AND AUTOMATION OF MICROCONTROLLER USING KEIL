echo "# COOLING-SYSTEM" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Rithika3/COOLING-SYSTEM.git
git push -u origin main
#include "uPSD3212C.h"      // Replace with your specific microcontroller header
#include "DHT.h"            // Library for DHT sensor
#include "LCD.h"            // Library for LCD display (if used)

// Define pins for DHT sensor and Relay
#define DHT_PIN GPIO_PIN_0
#define DHT_PORT GPIOA
#define RELAY_PIN GPIO_PIN_1
#define RELAY_PORT GPIOA

DHT_HandleTypeDef dht;

// Optimized parameters from ANSYS simulations
#define OPTIMAL_TEMP_THRESHOLD 25.0
#define COOLING_FAN_SPEED_HIGH 100
#define COOLING_FAN_SPEED_LOW 50

void GPIO_Init(void) {
    // Enable GPIOA clock
    // Implementation specific to uPSD3212C, ensure proper configuration

    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Configure DHT_PIN
    GPIO_InitStruct.Pin = DHT_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    // Initialization function specific to uPSD3212C
    HAL_GPIO_Init(DHT_PORT, &GPIO_InitStruct);

    // Configure RELAY_PIN
    GPIO_InitStruct.Pin = RELAY_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    // Initialization function specific to uPSD3212C
    HAL_GPIO_Init(RELAY_PORT, &GPIO_InitStruct);

    // Initialize DHT sensor
    dht.Pin = DHT_PIN;
    dht.Port = DHT_PORT;
    dht.Type = DHT11; // or DHT22
    DHT_Init(&dht);
}

void SystemClock_Config(void) {
    // Configure the system clock
    // Implementation depends on the specific microcontroller
}

void ControlCoolingFan(float temperature) {
    if (temperature > OPTIMAL_TEMP_THRESHOLD) {
        HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_SET); // Turn on cooling fan at high speed
        // Set fan speed to high
        // Use PWM or another method to control fan speed
    } else {
        HAL_GPIO_WritePin(RELAY_PORT, RELAY_PIN, GPIO_PIN_RESET); // Turn off cooling fan
        // Set fan speed to low
        // Use PWM or another method to control fan speed
    }
}

int main(void) {
    HAL_Init();
    SystemClock_Config();
    GPIO_Init();

    float temperature = 0.0;
    float humidity = 0.0;

    while (1) {
        if (DHT_Read(&dht, &temperature, &humidity) == DHT_OK) {
            ControlCoolingFan(temperature);
            // Optionally display values on LCD
            LCD_SetCursor(0, 0);
            LCD_Print("Temp: ");
            LCD_PrintFloat(temperature);
            LCD_SetCursor(1, 0);
            LCD_Print("Hum: ");
            LCD_PrintFloat(humidity);
        }
        HAL_Delay(2000); // Delay 2 seconds between readings
    }
}
